// 🌍 Mobile-Enhanced + AI Receipts + Client Notifications for LushDashboard
import React, { useState, useEffect, useContext } from "react";
import ProjectCard from "./ProjectCard";
import { Bar, Line, Pie } from "react-chartjs-2";
import "chart.js/auto";
import axios from "axios";
import { UserContext } from "../context/UserContext";

const LushDashboard = () => {
  const [projects, setProjects] = useState([]);
  const [receipts, setReceipts] = useState([]);
  const [globalSummary, setGlobalSummary] = useState({});
  const [uploading, setUploading] = useState(false);
  const { role, email, firstName } = useContext(UserContext);

  useEffect(() => {
    fetchProjects();
    fetchReceipts();
  }, []);

  const fetchProjects = async () => {
    const res = await axios.get("/api/projects");
    let data = res.data;
    if (role === "builder") {
      data = data.filter((p) => p.builderEmail === email);
    } else if (role === "client") {
      data = data.filter((p) => p.clientEmail === email);
    }
    setProjects(data);
    const totals = calculateGlobalSummary(data);
    setGlobalSummary(totals);
  };

  const fetchReceipts = async () => {
    const res = await axios.get("/api/receipts");
    setReceipts(res.data);
  };

  const calculateGlobalSummary = (projects) => {
    let loan = 0, sales = 0, cost = 0, equity = 0;
    projects.forEach((p) => {
      loan += p.loan;
      sales += p.saleEstimate;
      cost += p.landCost + p.buildCost;
      equity += p.saleEstimate - (p.loan + (p.deposit || 0));
    });
    return { loan, sales, cost, equity };
  };

  const handleReceiptUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;
    setUploading(true);
    const formData = new FormData();
    formData.append("receipt", file);
    const receipt = await axios.post("/api/receipt-parse", formData);
    await axios.post("/api/xero-sync", {
      user: email,
      projectName: receipt.data.project,
      amount: receipt.data.amount,
      description: receipt.data.description,
      category: receipt.data.category
    });
    await axios.post("/api/receipt-scan", {
      receiptId: receipt.data.id
    });
    alert("✅ Receipt uploaded, scanned and synced with Xero!");
    fetchReceipts();
    setUploading(false);
  };

  const updateSpend = async (receiptId, field, value) => {
    await axios.post("/api/receipt-update", {
      id: receiptId,
      field,
      value
    });
    fetchReceipts();
  };

  const localTime = new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });

  const builderBreakdown = () => {
    const byBuilder = {};
    receipts.forEach((r) => {
      const key = r.builder || "Unknown";
      byBuilder[key] = (byBuilder[key] || 0) + parseFloat(r.amount);
    });
    return {
      labels: Object.keys(byBuilder),
      datasets: [{
        label: "Spend per Builder",
        data: Object.values(byBuilder),
        backgroundColor: ["#3b82f6", "#10b981", "#f59e0b"]
      }]
    };
  };

  return (
    <div className="p-4 md:p-6 text-sm md:text-base">
      <h2 className="text-xl font-bold mb-2">👋 Welcome, {firstName} – Local Time: {localTime}</h2>
      <p className="text-gray-500 mb-4">Here’s a snapshot of your real estate empire.</p>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <SummaryCard label="Loan Approved" value={globalSummary.loan} color="bg-green-100" />
        <SummaryCard label="Total Spend" value={globalSummary.cost} color="bg-yellow-100" />
        <SummaryCard label="Projected Sales" value={globalSummary.sales} color="bg-blue-100" />
        <SummaryCard label="Net Equity" value={globalSummary.equity} color="bg-gray-100" />
      </div>

      <div className="grid md:grid-cols-2 gap-4 mb-6">
        {projects.map((proj) => (
          <div key={proj.id} className="bg-white rounded-lg shadow-md p-4">
            <ProjectCard project={proj} role={role} />
          </div>
        ))}
      </div>

      {role !== "client" && (
        <div className="bg-white p-4 mb-6 rounded shadow">
          <h4 className="text-md font-semibold mb-2">📷 Upload Receipt (Camera Friendly)</h4>
          <input type="file" capture="environment" accept="image/*,application/pdf" onChange={handleReceiptUpload} disabled={uploading} />
          {uploading && <p className="text-blue-600 mt-2">Uploading...</p>}
        </div>
      )}

      <div className="bg-white p-4 mb-6 rounded shadow">
        <h4 className="text-md font-semibold mb-2">📁 Past Receipts</h4>
        <div className="overflow-auto">
          <table className="min-w-full">
            <thead><tr>
              <th>Project</th>
              <th>Description</th>
              <th>Amount</th>
              <th>Category</th>
              <th>Edit</th>
            </tr></thead>
            <tbody>
              {receipts.map((r) => (
                <tr key={r.id}>
                  <td>{r.project}</td>
                  <td><input defaultValue={r.description} onBlur={(e) => updateSpend(r.id, "description", e.target.value)} /></td>
                  <td><input defaultValue={r.amount} onBlur={(e) => updateSpend(r.id, "amount", e.target.value)} /></td>
                  <td><input defaultValue={r.category} onBlur={(e) => updateSpend(r.id, "category", e.target.value)} /></td>
                  <td><a href={r.link} target="_blank" rel="noreferrer" className="text-blue-600">View</a></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <div className="bg-white p-4 mb-6 rounded shadow">
        <h4 className="text-md font-semibold mb-2">📊 Spend Breakdown Per Builder</h4>
        <Pie data={builderBreakdown()} />
      </div>

      <div className="bg-white rounded shadow p-4 mb-6">
        <h4 className="text-md font-semibold mb-2">📊 Equity vs Spend vs Sale</h4>
        <Bar data={chartData} />
      </div>

      <div className="bg-white rounded shadow p-4 mb-6">
        <h4 className="text-md font-semibold mb-2">📈 Timeline Progress</h4>
        <Line data={timelineData} />
      </div>
    </div>
  );
};

const SummaryCard = ({ label, value, color }) => (
  <div className={`rounded p-4 ${color}`}>
    <h4 className="text-sm text-gray-600">{label}</h4>
    <p className="text-lg font-bold">${value.toLocaleString()}</p>
  </div>
);

export default LushDashboard;

// ✅ Features added:
// 📷 Mobile camera upload + Xero sync
// 🔍 Smart AI receipt scanning
// 📊 Spend chart by builder
// 📱 Optimized for mobile & future mobile app use
// 💳 Upload invoices/payments per client build
// 🔔 Notify client on milestone change (roofing, lockup, etc)